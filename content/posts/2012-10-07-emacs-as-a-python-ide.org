赋闲脱产的半年里，自己用C++/Java/Lisp胡乱写了几万行的代码，到了现在的公司，给OpenStack项目贴牛皮藓，反倒是Python用得最多。作为公司里面唯一的Emacser（没准也是
公司里JJ最长的吧，[[http://www.douban.com/note/232209060/][笑]]），我一直致力于在Emacs平台上折腾出一套顺手的Python开发环境，所幸有些小心得，付诸纸面，以飨大家。

<<table-of-contents>>
** Table of Contents
   :PROPERTIES:
   :CUSTOM_ID: table-of-contents
   :END:

<<text-table-of-contents>>

-  [[sec-1][1 Python.el的选择]]

   -  [[sec-1-1][1.1 ipython集成]]

-  [[sec-2][2 Emacs补全：Pymacs和Ropemacs]]
-  [[sec-3][3 virtualenv]]

   -  [[sec-3-1][3.1 virtualenvwrapper]]
   -  [[sec-3-2][3.2 virtualenv.el]]

-  [[sec-4][4 Miscs]]

#+BEGIN_HTML
  <div id="outline-container-1" class="outline-2">
#+END_HTML

** 1 Python.el的选择
   :PROPERTIES:
   :CUSTOM_ID: sec-1
   :END:

#+BEGIN_HTML
  <div id="text-1" class="outline-text-2">
#+END_HTML

Emacs的python-mode有两套，一个是Emacs官方提供的python.el，另外一套是Python社区提供的python-mode.el。不过python.el和python-mode.el都有各种各样的小问题，python.el似乎是无法正确处理python的docstring，而python-mode.el的menu项太过繁杂，而且很多menu无法正确工作。这里用到的python.el来自于[[https://github.com/fgallina/python.el]]，细节可以参考水木社区的[[http://ar.newsmth.net/thread-4c0bb9b270679d-1.html][讨论]]。

安装方法可以参考项目主页的README，我自己针对[[https://github.com/dimitri/el-get][el-get]]做了一个recipe，这样以后更新装卸都会方便很多，recipe如下：

#+BEGIN_SRC lisp
    (:name python
           :website "https://github.com/fgallina/python.el"
           :description "improved python.el from Fabián Ezequiel Gallina"
           :type github
           :pkgname "fgallina/python.el")
#+END_SRC

不过这个patch并没有被el-get接收，限于时间精力，我没有再去细究el-get撰写recipe的规范。

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div id="outline-container-1-1" class="outline-3">
#+END_HTML

*** 1.1 ipython集成
    :PROPERTIES:
    :CUSTOM_ID: sec-1-1
    :END:

#+BEGIN_HTML
  <div id="text-1-1" class="outline-text-3">
#+END_HTML

交互式的开发是python/ruby/lisp这类动态语言的重要特性，它让程序员从“编码-编译-运行-调试“的程序开发工程链中解放出来，从老旧的批处理是开发过渡到现代的交互式开发。如果你用过[[http://v.youku.com/v_show/id_XMjYxNjM4MDQ0.html][slime]]，你就会知道，交互式的开发不仅仅是一种开发模式，slime也不仅仅是一种工具，而是一种编程的革命。Emacs集成ipython，虽然没有slime那么强大，但是对于提高开发效率还是有莫大的帮助的。幸运的是，fgalling/python.el是支持ipython的。关于fgalling/python.el的参考设置如下：

#+BEGIN_SRC lisp
    (add-to-list 'load-path (expand-file-name                                                                        
                             "~/.emacs.d/el-get/python"))                                                            
    (require 'python)                                                                                                
    (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))                                                       
    (setq                                                                                                            
     python-shell-interpreter "ipython2"                                                                             
     python-shell-interpreter-args ""                                                                                
     python-shell-prompt-regexp "In \\[[0-9]+\\]: "                                                                  
     python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "                                                           
     python-shell-completion-setup-code                                                                              
     "from IPython.core.completerlib import module_completion"                                                       
     python-shell-completion-module-string-code                                                                      
     "';'.join(module_completion('''%s'''))\n"                                                                       
     python-shell-completion-string-code                                                                             
     "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
#+END_SRC

常用快捷键：

-  C-c C-z: (python-shell-switch-to-shell)，切换至ipython解释器
-  C-c C-c: (python-shell-send-buffer &optional
   ARG)，发送整个buffer内容到ipython解释器运行

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div id="outline-container-2" class="outline-2">
#+END_HTML

** 2 Emacs补全：Pymacs和Ropemacs
   :PROPERTIES:
   :CUSTOM_ID: sec-2
   :END:

#+BEGIN_HTML
  <div id="text-2" class="outline-text-2">
#+END_HTML

语言补全一直是Vim/Emacs这类上古"IDE"的弱项，每种语言都有自己的补全插件、配置方法和版本差异，而网上资料、特别是中文资料，或是陈旧潦草，或是语焉不详，常常让初学者们不知所措。本文所载内容恐怕两年左右就会过时，诸位看官高贤注意鉴别......

Emacs下的通用补全插件大概就是[[http://cx4a.org/software/auto-complete][auto-complete]]和[[http://capitaomorte.github.com/yasnippet/][yasnippet]]了，前者可以做出基于buffer分词的补全，后者可以基于特定编程语言语法结构的补全。不过基于语义的补全，Emacs+Python下用的是pymacs和ropemacs。需要安装的有

-  pymacs
-  rope
-  ropemacs
-  ropemode

以上均可通过el-get安装。如若使用过程中出现莫名问题，不要纠缠，有可能是版本问题，无妨试验下用apt-get/pacman/yum安装。我本机上的配置如下：

#+BEGIN_SRC lisp
    ;;; pymacs, rope and ropemacs
    (add-to-list 'load-path "~/.emacs.d/el-get/pymacs")
    (require 'pymacs)

    (setq pymacs-load-path '("~/.emacs.d/el-get/rope"
                             "~/.emacs.d/el-get/ropemacs"))

    ;; Initialize Pymacs
    (autoload 'pymacs-apply "pymacs")
    (autoload 'pymacs-call "pymacs")
    (autoload 'pymacs-eval "pymacs" nil t)
    (autoload 'pymacs-exec "pymacs" nil t)
    (autoload 'pymacs-load "pymacs" nil t)
    ;; Initialize Rope                                                                                             
    (pymacs-load "ropemacs" "rope-")
    (setq ropemacs-enable-autoimport t)
#+END_SRC

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div id="outline-container-3" class="outline-2">
#+END_HTML

** 3 virtualenv
   :PROPERTIES:
   :CUSTOM_ID: sec-3
   :END:

#+BEGIN_HTML
  <div id="text-3" class="outline-text-2">
#+END_HTML

[[http://www.virtualenv.org/en/latest/index.html][virtualenv]]是Python的sandbox（沙盒）。那么什么是sandbox呢？

在日常开发中我们常常碰到这样的场景：

-  需要针对不同的python library做测试（兼容性、性能等）
-  需要多人共享一台开发机

可是：

-  并不是所有人都有向系统PYTHONPATH安装python library的权限
-  我们常常需要同时安装多个不同版本的python library

而virtualenv通过一些脚本，通过软连接和修改环境变量的方式，提供了一个轻量级的虚拟python环境，在这里面个人可以按照自己意愿任意装卸配置library，也可以针对不同版本的library创建不同的virtualenv，方便的很。

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div id="outline-container-3-1" class="outline-3">
#+END_HTML

*** 3.1 virtualenvwrapper
    :PROPERTIES:
    :CUSTOM_ID: sec-3-1
    :END:

#+BEGIN_HTML
  <div id="text-3-1" class="outline-text-3">
#+END_HTML

virtualenv默认是在当前目录下建立一个.venv目录，但是这样有一个问题，就是virtualenv本身的管理很不方便，因为需要记忆不同的.venv的存放位置、具体用途等等。[[http://www.doughellmann.com/projects/virtualenvwrapper/][virtualenvwrapper]]则通过一些python和shell脚本，在virtualenv的基础上建立了一层抽象，实现了对virtualenv本身的统一管理。virtualenvwrapper会默认在$HOME/.virtualenvs目录下创建所有的virtualenv。

virtualenv和virtualenvwrapper均可以通过python pip安装：

#+BEGIN_SRC sh
    pip install virtualenv virtualenvwrapper
#+END_SRC

常用命令：

-  mkvirtualenv venv\_name: 建立一个新的virtualenv，
-  workon venv\_name: 切换到venv\_name这个virtualenv

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div id="outline-container-3-2" class="outline-3">
#+END_HTML

*** 3.2 virtualenv.el
    :PROPERTIES:
    :CUSTOM_ID: sec-3-2
    :END:

#+BEGIN_HTML
  <div id="text-3-2" class="outline-text-3">
#+END_HTML

[[https://github.com/aculich/virtualenv.el][virtualenv.el]]可以配合Emacs集成virtualenv，可以通过el-get安装。virtualenv.el需要virtualenv和virtualenvwrapper。

配置：

#+BEGIN_SRC lisp
    ;; virtualenv support
    (add-to-list 'load-path (expand-file-name
                             "~/.emacs.d/el-get/virtualenv"))
    (require 'virtualenv)
#+END_SRC

常用命令：

-  M-x virtualenv-workon: 切换virtualenv

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div id="outline-container-4" class="outline-2">
#+END_HTML

** 4 Miscs
   :PROPERTIES:
   :CUSTOM_ID: sec-4
   :END:

#+BEGIN_HTML
  <div id="text-4" class="outline-text-2">
#+END_HTML

一些hook设置:

#+BEGIN_SRC lisp
    (add-hook 'python-mode-hook
              (lambda ()
                (ropemacs-mode)
                (global-set-key (kbd "RET") 'newline-and-indent)
                (auto-fill-mode 1)
                (virtualenv-minor-mode 1)))
#+END_SRC

除了以上，Emacs中和Python开发有关的插件还可以有pylint、pep8、pyflakes等，参考文章：

-  [[http://pedrokroger.net/2010/07/configuring-emacs-as-a-python-ide-2/][Configuring
   Emacs as a Python IDE]]
-  [[http://www.enigmacurry.com/2008/05/09/emacs-as-a-powerful-python-ide/][Emacs
   as a powerful Python IDE]]
-  [[http://hide1713.wordpress.com/2009/01/30/setup-perfect-python-environment-in-emacs/][Setup
   Perfect Python Environment In Emacs]]
-  [[http://www.saltycrane.com/blog/2010/05/my-emacs-python-environment/][My
   Emacs Python environment]]

以上，抛砖引玉，希望能够对刚刚接触Linux/Python/Emacs的朋友有些许帮助。

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML
